
* recursion
** basic 
a function calling itself
#+BEGIN_SRC java
eg. 
void fun()
{
  .
  .
  .
  .
  fun();
}
#+END_SRC
stack segment is has store the fun(). Infinitily recursion is run, it become StackOverflowError and end the program
stack can auto-scrink and auto-extends.
program for stackOverFlowError:

#+Begin_src java
class Main{

static void fun(int n)
{
  system.out.println(n);
  fun(n-1);
}

public static void main(String arg[])
{
   fun(3); //calling fun
}

}
#+End_src

------------------------------------------------
Output :
#+Begin_src java
3 
2
1
0
-1
2
.
.
.
.
.
.
Exception stackOverFlowError
#+End_src
-------------------------------------------------

*To avoid stackOverFlowError, we want to terminate the program by return at a base condition*

// if n==0 is a base condition and return from the method.

Program :
#+Begin_src java
class Main
{
static void fun(int n)
{
  if(n==0)
     return ;
  system.out.println(n);
  fun(n-1);
}

public static void main(String arg[])
{
   fun(3); //calling fun
}

}

/* Output :
// 3
// 2
// 1
*/
#+end_src

Diagram of stack segment

1) call the stack start the main function.

| 1111111111111111111111111111111 |                  
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2            main()           2 |
| 2                             2 |
| 2222222222222222222222222222222 |
| 1111111111111111111111111111111 |

2) the fun is fetch on stack segment

| 1111111111111111111111111111111 |
|                                 |
|                                 |
|                                 |
|                                 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2           fun(3)            2 |
| 2                             2 |
| 2222222222222222222222222222222 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2           main()            2 |
| 2                             2 |
| 2222222222222222222222222222222 |
| 1111111111111111111111111111111 |

3) one by one the stack full by call the function of itself

| 1111111111111111111111111111111 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2          fun(0)contion      2 |----------> condition satisifies then the return and pop from the stack segment
| 2                             2 |
| 2222222222222222222222222222222 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2           fun(1)            2 |
| 2                             2 |
| 2222222222222222222222222222222 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2            fun(2)           2 |
| 2                             2 |
| 2222222222222222222222222222222 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2           fun(3)            2 |
| 2                             2 |
| 2222222222222222222222222222222 |
|                                 |
| 2222222222222222222222222222222 |
| 2                             2 |
| 2           main()            2 |
| 2                             2 |
| 2222222222222222222222222222222 |
| 1111111111111111111111111111111 |

4) the condition condition pop one by one downwards upto start.

*Application of Recursion*
1) Dynamic programming
2) Tree traversal
3) Divide and conquer Algorithms(binary search, merge sort, quick sort)


** print 1st N natural number (magic of recursion)

*** code
#+Begin_src java
private static void forwardprint(int i) 
{
	if(i<1)
		return;
	forwardprint(i-1);
	System.out.print(i+" ");	
}
#+End_src

*** explaination 
after we do n to 0 but the result is store in forward 1 2 3 4 . . . . .

*After the function return then one by one execute the remaining code and go to preview fun*

function go first from 10 9 8 7 6 5 4 3 2 1. when fun(0) the next funtion is if condition satisified.

pop the fun(0), move to preview fun(1) and excute the system.out.print(n); => 1 
pop the fun(1), move to preview fun(2) and excute the system.out.print(n); => 2
pop the fun(2), move to preview fun(3) and excute the system.out.print(n); => 3  
pop the fun(3), move to preview fun(4) and excute the system.out.print(n); => 4 
pop the fun(4), move to preview fun(5) and excute the system.out.print(n); => 5 
pop the fun(5), move to preview fun(6) and excute the system.out.print(n); => 6
                         :
			 :
			 :
pop the fun(9), move to preview fun(1) and excute the system.out.print(n); => 10 
pop the fun(10), move to the main function.


** find factorial of a number using recursion  
5! = 5*4*3*2*1 =120

n! =n * (n-1)! 
5! = 5 * (5-1)! => n=4 in next function
4! = 4 * (4-1)! => n=3 in next function
3! = 3 * (3-1)! => n=2 in next function
2! = 2 * (2-1)! => n=1 in next function
1! = return 1;



*** stack seqment
push the function 
n=3
|----------+-----------+-----------+----------|
| main()   | 3*fact(2) | 2*fact(1) | return 1 |
|----------+-----------+-----------+----------|
| main()   | 3*fact(2) | 2*1       | pop (1)  |
|----------+-----------+-----------+----------|
| main()   | 3* 2      | pop (2)   | pop      |
|----------+-----------+-----------+----------|
| main() 6 | pop(6)    | pop       | pop      |
|----------+-----------+-----------+----------|

**** code


** Fibonacci series using recursion

Three rules of recursion
1) Can it be broken down to smaller problem
2) Are the result dependent on each other
3) Does it have a *base condition*

1 1 2 3 5 8 13 21 . . . . . . . .


dependecy is dependents of pre term and 

*recursion relationship:*

fibo(n) = fibo(n-1) + fibo(n-2)
eg
n=6 so = (5+4+3+2+1) + (4+3+2+1)
it can be recursion tree

*** Recursion tree
1) N=5 , tree top 5
                 5
2) move from left to right, which means fibo(n-1) then fibo(n-2)
             1)      5 (3+2)
             11)/ 3      \ 12) 2
     2)   fibo(4) (2+1)    fib(3) (1+1)
        2 7)/ \ 8) 1     1 9)  /  \ 10) 1
 3)   fibo(3)   fibo(2)  fibo(2)  fibo(1)
    5) 1 /  \ 6) 1
4)  fibo(2)  fibo(1)

**** code
#+Begin_src java
static intfib(int n)
{
   if(n==1 || n==2)
     return 1;
  return fib(n-1)+fib(n-2);
}
#+End_src


** count the number of digits
n=12345

        12345 5
	  |   +
	1234  1  4
	  |   +
	 123  1  3
          |   +
	 12   1  2
	  |   +
	  1   1  1   
	  |   +
	  0   0 

*** code
#+Begin_src java
int count(int n)
{
   if(n==0)
     return 0;
   return count(n/10)+1;
}
#+End_src

** find the sum of digits of a number using recursion.


** reverse a string using recursion
   0123
s="abcd"

r="" => string is an immutable.

concatate the d c b a in string r


** if a string is palindrome using recursion


** sum of all elements in an Array


** solution of josephus problem using recursion

